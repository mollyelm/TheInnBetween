// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TibBackend.Data;

#nullable disable

namespace TibBackend.Migrations
{
    [DbContext(typeof(TibDbContext))]
    [Migration("20250819180915_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TibBackend.Models.ActionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParcelId");

                    b.HasIndex("UserId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("TibBackend.Models.Locker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("boolean");

                    b.Property<string>("LockerNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MagicalKeyCode")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LockerNumber")
                        .IsUnique();

                    b.ToTable("Lockers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsOccupied = false,
                            LockerNumber = "L001",
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            IsOccupied = false,
                            LockerNumber = "L002",
                            Size = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            IsOccupied = false,
                            LockerNumber = "L003",
                            Size = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            IsOccupied = false,
                            LockerNumber = "L004",
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            IsOccupied = false,
                            LockerNumber = "L005",
                            Size = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            IsOccupied = false,
                            LockerNumber = "L006",
                            Size = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            IsOccupied = false,
                            LockerNumber = "L007",
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            IsOccupied = false,
                            LockerNumber = "L008",
                            Size = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            IsOccupied = false,
                            LockerNumber = "L009",
                            Size = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 10,
                            IsOccupied = false,
                            LockerNumber = "L010",
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 11,
                            IsOccupied = false,
                            LockerNumber = "L011",
                            Size = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 12,
                            IsOccupied = false,
                            LockerNumber = "L012",
                            Size = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 13,
                            IsOccupied = false,
                            LockerNumber = "L013",
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 14,
                            IsOccupied = false,
                            LockerNumber = "L014",
                            Size = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 15,
                            IsOccupied = false,
                            LockerNumber = "L015",
                            Size = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 16,
                            IsOccupied = false,
                            LockerNumber = "L016",
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            IsOccupied = false,
                            LockerNumber = "L017",
                            Size = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 18,
                            IsOccupied = false,
                            LockerNumber = "L018",
                            Size = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 19,
                            IsOccupied = false,
                            LockerNumber = "L019",
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 20,
                            IsOccupied = false,
                            LockerNumber = "L020",
                            Size = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("TibBackend.Models.Npc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Affiliation")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("PortraitUrl")
                        .HasColumnType("text");

                    b.Property<string>("ThemeColor")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Npcs");
                });

            modelBuilder.Entity("TibBackend.Models.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LockerId")
                        .HasColumnType("integer");

                    b.Property<string>("LoreContent")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("ProcessedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RecipientLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipientNpcId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScannedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SenderLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("SenderNpcId")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LockerId");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("RecipientNpcId");

                    b.HasIndex("SenderNpcId");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("TibBackend.Models.Seal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AppliedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppliedByUserId");

                    b.HasIndex("ParcelId");

                    b.ToTable("Seals");
                });

            modelBuilder.Entity("TibBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdminUnlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeliveryUnlocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SettingsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TibBackend.Models.ActionHistory", b =>
                {
                    b.HasOne("TibBackend.Models.Parcel", "Parcel")
                        .WithMany("Actions")
                        .HasForeignKey("ParcelId");

                    b.HasOne("TibBackend.Models.User", "User")
                        .WithMany("Actions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TibBackend.Models.Parcel", b =>
                {
                    b.HasOne("TibBackend.Models.Locker", "Locker")
                        .WithMany("Parcels")
                        .HasForeignKey("LockerId");

                    b.HasOne("TibBackend.Models.User", "ProcessedBy")
                        .WithMany("ScannedParcels")
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TibBackend.Models.Npc", "RecipientNpc")
                        .WithMany("ReceivedParcels")
                        .HasForeignKey("RecipientNpcId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TibBackend.Models.Npc", "SenderNpc")
                        .WithMany("SentParcels")
                        .HasForeignKey("SenderNpcId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Locker");

                    b.Navigation("ProcessedBy");

                    b.Navigation("RecipientNpc");

                    b.Navigation("SenderNpc");
                });

            modelBuilder.Entity("TibBackend.Models.Seal", b =>
                {
                    b.HasOne("TibBackend.Models.User", "AppliedBy")
                        .WithMany("SealsApplied")
                        .HasForeignKey("AppliedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TibBackend.Models.Parcel", "Parcel")
                        .WithMany("Seals")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppliedBy");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("TibBackend.Models.Locker", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("TibBackend.Models.Npc", b =>
                {
                    b.Navigation("ReceivedParcels");

                    b.Navigation("SentParcels");
                });

            modelBuilder.Entity("TibBackend.Models.Parcel", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Seals");
                });

            modelBuilder.Entity("TibBackend.Models.User", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("ScannedParcels");

                    b.Navigation("SealsApplied");
                });
#pragma warning restore 612, 618
        }
    }
}
